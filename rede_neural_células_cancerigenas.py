# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18J7KJrqxqyQz0FyghecuCXnJ4HINGUS-
"""

# -*- coding: utf-8 -*-
"""Rede Neural C√©lulas Cancerigenas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZCkSgBvYMH-JgqYziKHp6o6DgMwVMDkt

<h1>Download do DataSet </h1>
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("mohammadamireshraghi/blood-cell-cancer-all-4class")

print("Path to dataset files:", path)

"""<h1>Importa√ß√µes necess√°rias</h1>

"""

import os
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Subset, DataLoader
from torchvision import transforms, datasets, models
from torch.utils.data import DataLoader, random_split
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import numpy as np
import time
import random
from PIL import Image

"""##Iniciar uso da GPU"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Usando dispositivo: {device}")

"""##Caminho das pastas"""

# data_dir = "/kaggle/input/blood-cell-cancer-all-4class/Blood cell Cancer [ALL]"
data_dir = os.path.join(path, "Blood cell Cancer [ALL]")
batch_size = 32
num_epochs = 10
num_classes = 4
patience = 5  # early stopping
model_save_path = "best_model_efficientnet_b0.pth"

"""##Transforma√ß√µes"""

train_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(15),
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

val_test_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

"""##Carregando Datasets

"""

full_dataset = datasets.ImageFolder(root=data_dir, transform=train_transform)

train_size = int(0.7 * len(full_dataset))
val_size = int(0.15 * len(full_dataset))
test_size = len(full_dataset) - train_size - val_size

train_dataset, val_dataset, test_dataset = random_split(full_dataset, [train_size, val_size, test_size])

val_dataset.dataset.transform = val_test_transform
test_dataset.dataset.transform = val_test_transform

"""##DataLoaders"""

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=4)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=4)

"""##Conferindo as classes"""

print(f"Tamanho total: {len(full_dataset)} imagens")
print(f"Treino: {len(train_dataset)}, Valida√ß√£o: {len(val_dataset)}, Teste: {len(test_dataset)}")

"""##Arquitetura EfficientNet

"""

model = models.efficientnet_b0(weights=models.EfficientNet_B0_Weights.DEFAULT)

for param in model.features.parameters():
    param.requires_grad = False

in_features = model.classifier[1].in_features
model.classifier[1] = nn.Linear(in_features, num_classes)
model = model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

best_val_acc = 0.0
epochs_no_improve = 0
best_model_wts = None

train_losses, val_losses = [], []
train_accuracies, val_accuracies = [], []

"""##Treinamento e Monitoramento de Curvas"""

for epoch in range(num_epochs):
    print(f"\nEpoch {epoch+1}/{num_epochs}")
    start_time = time.time()

    # Treino
    model.train()
    running_loss, running_corrects = 0.0, 0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        _, preds = torch.max(outputs, 1)
        running_loss += loss.item() * inputs.size(0)
        running_corrects += torch.sum(preds == labels.data)

    train_loss = running_loss / len(train_dataset)
    train_acc = running_corrects.double() / len(train_dataset)
    train_losses.append(train_loss)
    train_accuracies.append(train_acc.item())

    # Valida√ß√£o
    model.eval()
    val_loss, val_corrects = 0.0, 0
    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            _, preds = torch.max(outputs, 1)
            val_loss += loss.item() * inputs.size(0)
            val_corrects += torch.sum(preds == labels.data)

    val_loss = val_loss / len(val_dataset)
    val_acc = val_corrects.double() / len(val_dataset)
    val_losses.append(val_loss)
    val_accuracies.append(val_acc.item())

    print(f"Train Loss: {train_loss:.4f} | Train Acc: {train_acc:.4f}")
    print(f"Val Loss: {val_loss:.4f} | Val Acc: {val_acc:.4f}")
    print(f"Tempo da √©poca: {(time.time() - start_time):.1f}s")


    if val_acc > best_val_acc:
        best_val_acc = val_acc
        best_model_wts = model.state_dict()
        epochs_no_improve = 0
        torch.save(best_model_wts, model_save_path)
        print(f"‚úÖ Novo melhor modelo salvo: {model_save_path}")
    else:
        epochs_no_improve += 1
        print(f"Nenhuma melhora h√° {epochs_no_improve} √©pocas consecutivas.")
        if epochs_no_improve >= patience:
            print("‚èπÔ∏è Early stopping ativado.")
            break

"""##Curvas de Treino vs Teste"""

epochs = range(1, len(train_losses) + 1)

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(epochs, train_losses, 'b', label='Treino')
plt.plot(epochs, val_losses, 'r', label='Valida√ß√£o')
plt.title("Perda por √©poca")
plt.xlabel("√âpocas")
plt.ylabel("Loss")
plt.legend()

plt.subplot(1,2,2)
plt.plot(epochs, train_accuracies, 'b', label='Treino')
plt.plot(epochs, val_accuracies, 'r', label='Valida√ß√£o')
plt.title("Acur√°cia por √©poca")
plt.xlabel("√âpocas")
plt.ylabel("Acur√°cia")
plt.legend()

plt.show()

"""##Avalia√ß√£o final com m√©tricas"""

print("\nüîÅ Carregando o melhor modelo salvo...")
model.load_state_dict(torch.load(model_save_path))
model.eval()

all_preds, all_labels = [], []
with torch.no_grad():
    for inputs, labels in test_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        _, preds = torch.max(outputs, 1)
        all_preds.extend(preds.cpu().numpy())
        all_labels.extend(labels.cpu().numpy())

print("\n--- RESULTADOS FINAIS ---")
print(classification_report(all_labels, all_preds, target_names=full_dataset.classes))

cm = confusion_matrix(all_labels, all_preds)
print("Matriz de confus√£o:\n", cm)
print("\nRelat√≥rio:\n", classification_report(all_labels, all_preds, target_names=full_dataset.classes))